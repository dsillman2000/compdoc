# CompDoc

{% set model = compdoc.module('compdoc.model') %}
{% set compiler = compdoc.module('compdoc.compiler')%}
{% set formatters = compdoc.module('compdoc_cli.formatters') %}

{% set ul = compdoc.formatter('ul') %}
{% set ilul = compdoc.formatter('inline_ul') %}
{% set href = compdoc.formatter('href') %}

CompDoc is a Python CLI tool for Jinja-formatting docstrings from your library into other documentation formats.

### Introduction

My impetus for putting this tool together was running into these issues maintaining documentation, even for relatively 
simple Python libraries:

> 
> 1. "I have to copy any changes I make to my docstrings to my other documentation sources, like my README. It almost 
>   makes me not want to bother changing the API of my existing code."
> 
> 2. "When my code is edited or moves around, line number links need to be rewritten to point to the correct lines in 
>   the source code."
> 
> 3. "I make updates to APIs in my code, but sometimes forget to update the docstrings or other documentation."
> 

CompDoc solves these issues by providing a CLI for parsing your Python library's constitutent modules, classes and 
functions. CompDoc provides a Jinja environment variable, `compdoc`, which can be used to access both the docstrings of 
your code and its true annotations.

### Getting Started

Install the CompDoc CLI using

```sh
pip install git+https://github.com/dsillman2000/compdoc.git
# soon: pip install compdoc
```

You can then initialize CompDoc in your project's root directory using

```sh
compdoc init path/to/project_folder
```

This will index your project, and create a configuration YAML called `.compdoc.yml` in the project folder. The 
configuration file will have a `modules` section, with indexed Python files, and a `formatters` section listing the 
default formatters available for templating in Jinja. The source code for the formatters will be available in a 
subfolder of your project folder, called `compdoc-formatters`, where you can add new ones to your project.

> Note: To reference custom formatters from the Jinja environment, you must add an entry in the `formatters` section of 
> your configuration.

> Note: Any time you make meaningful changes to your library, it will need to be re-indexed with `compdoc init`. It's 
> recommended that you use precommit to re-index and re-compile your docs on every commit.

CompDoc knows how to index three different types of Python library constructs:

- **Modules**: Distinct Python `*.py` source files, anywhere in the project directory tree.
- **Classes**: Class definitions within `*.py` source files.
- **Functions**: Function definitions within `*.py` source files, including those defined within classes.

When parsing the project, CompDoc uses Python's native `ast` library to parse metadata about each of the Python 
constructs you've implemented.

{{ ul.format_class(model.ModuleDoc) }}

{{ ul.format_class(model.ClassDoc) }}

{{ ul.format_class(model.FuncDoc) }}

The containment relationships between these constructs are summarized symbolically:

```
ModuleDoc* {
    ClassDoc* {
        FuncDoc*
    }
    FuncDoc*
}
```

In order to load documentation details into your Jinja context, you use the [`compdoc.module`]
({{ href.href(compiler.CompDoc.module) }}) function:

```j2
{{ "{%" }} set mymodule = compdoc.module('mymodule') {{ "%}" }}
```

Which will have attributes for the constituent classes and functions. For example, we can use it to format verbatim 
docstrings from our source code:

```j2
The `mymodule` module implements `MyClass`:
- {{ "{{" }} mymodule.MyClass.doc.string {{ "}}" }}
```

> Note that accessing the attributes enumerated in the above docs for `ClassDoc` and `FuncDoc` must be done through the 
> `doc` attribute. In this case, we're accessing the `string` attribute of `ClassDoc` via the `doc` attribute on
> `mymodule.MyClass`.

Likewise, we can access the verbatim docstrings from function definitions as well:

```j2
Docstring for `MyClass.my_function` method:
- {{ "{{" }} mymodule.MyClass.my_function.doc.string {{ "}}" }}

Docstring for `mymodule.my_standalone_function` method:
- {{ "{{" }} mymodule.my_standalone_function.doc.string {{ "}}" }}
```

## Formatters

### Built-in Formatters

The `compdoc` API provides a function for loading _formatters_ into the Jinja context, which are essentially namespaces
for storing helper Jinja macros which act on `ModuleDoc`, `ClassDoc` or `FuncDoc` instances. Some of the default 
out-of-the-box formatters are listed below:

|Formatter Name|Formatter API|
|-|-|
|`'href'`|{{ ilul.format_function(formatters.Href.href) }}|
|`'ul'`|{{ ilul.format_function(formatters.Ul.format_class) }}<br />{{ ilul.format_function(formatters.Ul.format_function) }}|
|`'inline_ul'`|{{ ilul.format_function(formatters.InlineUl.format_class) }}<br />{{ ilul.format_function(formatters.InlineUl.format_function) }}

### Custom Formatters

Custom formatters, then, can be injected into your project's CompDoc configuration by creating a new set of Jinja macros
inside of the `compdoc-formatters` directory in your project, e.g.

```j2
{{ "{%" }} macro format(class_or_func) {{ "%}" }}
<span>
    <b>{{ "{{" }} class_or_func.doc.filepath {{ "}}" }}, line {{ "{{" }} class_or_func.doc.line_no {{ "}}" }}</b>
    <ul><li>{{ "{{" }} class_or_func.doc.docstring.short_description {{ "}}" }}</li></ul>
</span>
{{ "{%" }} endmacro {{ "%}" }}
```

If we save this as `compdoc-formatters/fancy.html.j2` and add `fancy: compdoc-formatters/fancy.html.j2` to our 
`formatters` section of the configuration YAML, then we can use it in our CompDoc documents:

```j2
Fancily, our standalone function looks like:

{{ "{%" }} set fancy = compdoc.formatter('fancy') {{ "-%}" }}
{{ "{{" }} fancy.format(mymodule.my_standalone_function) {{ "}}" }}
```

Which compiles to look like the following

> Fancily, our standalone function looks like:
> 
> <span>
>     <b>mymodule.py, line 15</b>
>     <ul><li>The short description from our docstring for the function.</li></ul>
> </span>

## Acknowledgements

Author:

- David Sillman <dsillman2000@gmail.com>